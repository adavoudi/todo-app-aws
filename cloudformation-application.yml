Parameters:
  ProjectName:
    Type: String
    Description: The name of the CodeBuild project
    Default: todos
  IsServerless:
    Type: String
    Description: Whether the application is serverless or not
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  ImageTag:
    Type: String
    Description: The tag for the Docker image
    Default: latest
  ContainerImageRepositoryUri:
    Type: String
    Description: The URI of the ECR repository
  EC2ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  InstanceType:
    Type: String
    Default: t2.micro
    Description: The EC2 instance type for the ECS cluster.

Conditions:
  IsServerless: !Equals [!Ref IsServerless, "true"]
  IsServerful: !Equals [!Ref IsServerless, "false"]

Resources:

  ################## Frontend ##################

  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-frontend-${AWS::AccountId}'

  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt FrontendS3BucketOAIP.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub '${FrontendS3Bucket.Arn}/*'

  FrontendS3BucketOAIP:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ProjectName}'

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FrontendS3Bucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${FrontendS3BucketOAIP}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100

  ################## Cognito ##################

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      UserPoolName: !Sub '${ProjectName}-user-pool-${AWS::AccountId}'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Name: email
          Required: true
          Mutable: true
        - Name: name
          Required: true
          Mutable: true
  
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${ProjectName}-user-pool-client-${AWS::AccountId}'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub 'https://${CloudfrontDistribution.DomainName}'
      LogoutURLs:
        - !Sub 'https://${CloudfrontDistribution.DomainName}'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - phone
  
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub '${ProjectName}-domain'
      UserPoolId: !Ref UserPool

  ################## DynamoDB ##################

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub '${ProjectName}-todos-${AWS::AccountId}'
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  ################## Serverless ##################

  LambdaFunction:
    Type: AWS::Lambda::Function
    Condition: IsServerless
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: !Sub '${ProjectName}-lambda-${AWS::AccountId}'
      PackageType: Image
      Code:
        ImageUri: !Sub '${ContainerImageRepositoryUri}:${ImageTag}'
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTable
          REGION: !Ref 'AWS::Region'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: IsServerless
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt DynamoDBTable.Arn
  
  LamdbaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: IsServerless
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*'


  APIGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${ProjectName}-api'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - !Sub 'https://${CloudfrontDistribution.DomainName}'
        AllowMethods:
          - '*'
        AllowHeaders:
          - '*'

  APIGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref APIGateway
      IntegrationType:
        !If
          - IsServerless
          - AWS_PROXY
          - HTTP_PROXY
      ConnectionType:
        !If
          - IsServerless
          - INTERNET
          - VPC_LINK 
      ConnectionId:
        !If
          - IsServerless
          - ''
          - !Ref HTTPVpcLink
      IntegrationUri: 
        !If
          - IsServerless
          - !GetAtt LambdaFunction.Arn
          - !Ref ApplicationListener
      IntegrationMethod: ANY
      PayloadFormatVersion: '1.0'
      TimeoutInMillis: 29000

  APIGatewayAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref APIGateway
      AuthorizerType: JWT
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'
      Name: !Sub '${ProjectName}-authorizer-${AWS::AccountId}'

  APIGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref APIGateway
      RouteKey: ANY /{proxy+}
      Target: !Sub 'integrations/${APIGatewayIntegration}'
      AuthorizationType: JWT
      AuthorizerId: !Ref APIGatewayAuthorizer

  APIGatewayOptionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref APIGateway
      RouteKey: OPTIONS /{proxy+}
      Target: !Sub 'integrations/${APIGatewayIntegration}'
  
  APIGatewayProdStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref APIGateway
      StageName: $default
      AutoDeploy: true

  APIGatewayDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - APIGatewayProdStage
      - APIGatewayRoute
    Properties:
      ApiId: !Ref APIGateway
      StageName: $default

  ################## Serverful #################

  EC2Role:
    Type: AWS::IAM::Role
    Condition: IsServerful
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Access-to-ECR
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'
        - PolicyName: Access-to-DynamoDB
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt DynamoDBTable.Arn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: IsServerful
    Properties:
      Roles:
        - !Ref EC2Role
  
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Condition: IsServerful
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-launch-template'
      LaunchTemplateData:
        ImageId: !Ref EC2ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !GetAtt EC2SecurityGroup.GroupId
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            # Install docker
            yum update -y
            yum install -y docker

            # create the docker group and add the ec2-user to it
            usermod -aG docker ec2-user
            usermod -aG docker $USER
            newgrp docker

            # Start docker
            systemctl start docker

            # login to ECR
            aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${ContainerImageRepositoryUri}

            # Pull the image
            docker pull ${ContainerImageRepositoryUri}:${ImageTag}

            # Run the container
            docker run -d -e DYNAMODB_TABLE=${DynamoDBTable} -e REGION=${AWS::Region} -p 80:80 ${ContainerImageRepositoryUri}:${ImageTag}

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: IsServerful
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
           - !Ref ApplicationTargetGroup
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ec2-instance'
          PropagateAtLaunch: true

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: IsServerful
    Properties:
      Name: !Sub '${ProjectName}-alb'
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !GetAtt EC2SecurityGroup.GroupId
      Scheme: internal
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb'
  
  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsServerful
    Properties:
      Name: !Sub '${ProjectName}-target-group'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: '/health'

  ApplicationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: IsServerful
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  ################# Networking #################
  VPC:
    Type: AWS::EC2::VPC
    Condition: IsServerful
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: IsServerful
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: IsServerful
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.1.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: IsServerful
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: IsServerful
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: IsServerful
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsServerful
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Condition: IsServerful
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsServerful
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: IsServerful
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: IsServerful
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: IsServerful
    Properties:
      VpcId: !Ref VPC
  
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: IsServerful
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsServerful
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsServerful
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  HTTPVpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Condition: IsServerful
    Properties:
      Name: !Sub '${ProjectName}-vpc-link'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: IsServerful
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

Outputs:
  S3BucketFrontend:
    Value: !Ref FrontendS3Bucket
    Export:
      Name: 'S3BucketFrontend'
  RedirectURI:
    Value: !Sub 'https://${CloudfrontDistribution.DomainName}'
    Export:
      Name: 'RedirectURI'
  UserPoolID:
    Value: !Ref UserPool
    Export:
      Name: 'UserPoolID'
  UserPoolDomain:
    Value: !Ref UserPoolDomain
    Export:
      Name: 'UserPoolDomain'
  ClientID:
    Value: !Ref UserPoolClient
    Export:
      Name: 'ClientID'
  APIGatewayEndpoint:
    Value: !GetAtt APIGateway.ApiEndpoint
    Export:
      Name: 'APIGatewayEndpoint'